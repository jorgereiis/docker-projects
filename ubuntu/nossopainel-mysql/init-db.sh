#!/bin/bash
###############################################################################
# Script de Valida√ß√£o e Importa√ß√£o do MySQL - Nosso Painel Gest√£o
#
# NOTA: Executado pelo entrypoint do mysql:8.0-debian ap√≥s criar banco/usu√°rio
# Este script importa o dump SQL se existir e valida os dados
###############################################################################

# N√£o usar set -e global para ter controle fino de erros
# set -e

# Trap para erros cr√≠ticos
trap 'echo "‚ùå ERRO CR√çTICO na linha $LINENO. Abortando."; exit 1' ERR

echo "======================================================================"
echo "MySQL Post-Init Script - Nosso Painel Gest√£o"
echo "======================================================================"

# Aguarda MySQL estar pronto com retry
MAX_RETRIES=10
RETRY_COUNT=0
while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
    if mysqladmin ping -h localhost -u root --silent 2>/dev/null; then
        echo "‚úÖ MySQL est√° pronto!"
        break
    fi
    RETRY_COUNT=$((RETRY_COUNT + 1))
    echo "‚è≥ Aguardando MySQL estar pronto ($RETRY_COUNT/$MAX_RETRIES)..."
    sleep 2
done

if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
    echo "‚ùå ERRO: MySQL n√£o est√° respondendo ap√≥s $MAX_RETRIES tentativas"
    exit 1
fi

# Banco de dados (j√° foi criado pelo entrypoint)
DB_NAME="${MYSQL_DATABASE:-nossopaineldb}"

echo ""
echo "üìä Verificando banco '$DB_NAME'..."

# Conta quantas tabelas existem com verifica√ß√£o robusta
TABLE_COUNT=$(mysql -D ${DB_NAME} -se "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='${DB_NAME}'" 2>/dev/null || echo "0")

if ! [[ "$TABLE_COUNT" =~ ^[0-9]+$ ]]; then
    echo "‚ö†Ô∏è  AVISO: N√£o foi poss√≠vel contar tabelas. Assumindo banco vazio."
    TABLE_COUNT=0
fi

echo "   Tabelas existentes: $TABLE_COUNT"

if [ "$TABLE_COUNT" -eq 0 ]; then
    echo ""
    echo "üì¶ Banco vazio. Verificando se h√° dump SQL para importar..."

    DUMP_FILE="/docker-entrypoint-initdb.d/nossopaineldb.sql"

    if [ -f "$DUMP_FILE" ]; then
        DUMP_SIZE=$(du -h "$DUMP_FILE" | cut -f1)
        echo "üì• Importando dump: $DUMP_FILE (tamanho: $DUMP_SIZE)"
        echo "   (Isso pode levar alguns minutos...)"

        IMPORT_START=$(date +%s)

        if mysql ${DB_NAME} < "$DUMP_FILE" 2>/tmp/import_error.log; then
            IMPORT_END=$(date +%s)
            IMPORT_TIME=$((IMPORT_END - IMPORT_START))
            echo "‚úÖ Dump importado com sucesso em ${IMPORT_TIME}s!"

            # Valida importa√ß√£o contando tabelas novamente
            NEW_COUNT=$(mysql -D ${DB_NAME} -se "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='${DB_NAME}'" 2>/dev/null || echo "0")

            if [ "$NEW_COUNT" -gt 0 ]; then
                echo "   ‚úÖ Importa√ß√£o validada: $NEW_COUNT tabelas criadas"
            else
                echo "   ‚ö†Ô∏è  AVISO: Dump importado mas nenhuma tabela foi criada"
            fi
        else
            echo "‚ùå ERRO ao importar dump!"
            if [ -f /tmp/import_error.log ]; then
                echo "   Detalhes do erro:"
                cat /tmp/import_error.log | head -10
            fi
            echo "   O banco ficar√° vazio. Django aplicar√° migrations."
        fi
    else
        echo "‚ÑπÔ∏è  Nenhum dump encontrado em: $DUMP_FILE"
        echo "   Django aplicar√° migrations automaticamente."
    fi
else
    echo "‚úÖ Banco j√° possui $TABLE_COUNT tabelas."
    echo "   Inicializa√ß√£o anterior detectada. Pulando importa√ß√£o."
fi

# Garante permiss√µes para o usu√°rio da aplica√ß√£o
if [ -n "${MYSQL_USER}" ]; then
    echo ""
    echo "üîê Configurando permiss√µes para '${MYSQL_USER}'..."

    if mysql <<-EOSQL 2>/dev/null
        GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${MYSQL_USER}'@'%';
        FLUSH PRIVILEGES;
EOSQL
    then
        echo "‚úÖ Permiss√µes configuradas com sucesso!"

        # Verifica se usu√°rio tem acesso
        USER_COUNT=$(mysql -u ${MYSQL_USER} -p${MYSQL_PASSWORD} -D ${DB_NAME} -se "SELECT 1" 2>/dev/null || echo "0")
        if [ "$USER_COUNT" = "1" ]; then
            echo "   ‚úÖ Usu√°rio '${MYSQL_USER}' autenticado com sucesso"
        else
            echo "   ‚ö†Ô∏è  AVISO: N√£o foi poss√≠vel validar autentica√ß√£o do usu√°rio"
        fi
    else
        echo "   ‚ö†Ô∏è  AVISO: Erro ao configurar permiss√µes"
    fi
else
    echo ""
    echo "‚ÑπÔ∏è  Vari√°vel MYSQL_USER n√£o definida. Pulando configura√ß√£o de permiss√µes."
fi

# Valida contagens (se houver tabelas)
FINAL_TABLE_COUNT=$(mysql -D ${DB_NAME} -se "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='${DB_NAME}'" 2>/dev/null || echo "0")

if [ "$FINAL_TABLE_COUNT" -gt 0 ]; then
    echo ""
    echo "üìä Estat√≠sticas do banco '$DB_NAME':"
    echo "   Total de tabelas: $FINAL_TABLE_COUNT"

    # Tenta buscar estat√≠sticas de tabelas conhecidas
    USERS=$(mysql -D ${DB_NAME} -se "SELECT COUNT(*) FROM auth_user" 2>/dev/null || echo "N/A")
    CLIENTES=$(mysql -D ${DB_NAME} -se "SELECT COUNT(*) FROM cadastros_cliente" 2>/dev/null || echo "N/A")
    MENSALIDADES=$(mysql -D ${DB_NAME} -se "SELECT COUNT(*) FROM cadastros_mensalidade" 2>/dev/null || echo "N/A")

    if [ "$USERS" != "N/A" ]; then
        echo "   Usu√°rios (auth_user): $USERS"
    fi
    if [ "$CLIENTES" != "N/A" ]; then
        echo "   Clientes (cadastros_cliente): $CLIENTES"
    fi
    if [ "$MENSALIDADES" != "N/A" ]; then
        echo "   Mensalidades (cadastros_mensalidade): $MENSALIDADES"
    fi

    # Tamanho do banco de dados
    DB_SIZE=$(mysql -se "SELECT ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) FROM information_schema.tables WHERE table_schema='${DB_NAME}'" 2>/dev/null || echo "N/A")
    if [ "$DB_SIZE" != "N/A" ]; then
        echo "   Tamanho do banco: ${DB_SIZE} MB"
    fi
fi

echo ""
echo "======================================================================"
echo "‚úÖ Inicializa√ß√£o conclu√≠da com sucesso!"
echo "======================================================================"
echo ""
