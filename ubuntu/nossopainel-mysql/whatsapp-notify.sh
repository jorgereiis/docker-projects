#!/bin/bash
###############################################################################
# Fun√ß√£o Helper - Notifica√ß√µes WhatsApp via Django API Interna
#
# Uso:
#   source /usr/local/bin/whatsapp-notify.sh
#   send_whatsapp "Mensagem aqui" "tipo_notificacao"
#
# Exemplos:
#   send_whatsapp "Backup conclu√≠do com sucesso!" "backup_success"
#   send_whatsapp "ERRO: Falha no backup" "backup_error"
#   send_whatsapp "Alerta: Disk usage 85%" "monitor_alert"
###############################################################################

# URL do endpoint Django (mesma rede Docker interna)
DJANGO_URL="${DJANGO_INTERNAL_URL:-http://nossopainel-django:8001}"
WHATSAPP_ENDPOINT="${DJANGO_URL}/api/internal/send-whatsapp/"

# Timeout para requisi√ß√µes HTTP
HTTP_TIMEOUT=10

###############################################################################
# Fun√ß√£o: send_whatsapp
# Envia notifica√ß√£o WhatsApp via endpoint Django interno
#
# Par√¢metros:
#   $1 - mensagem (obrigat√≥rio)
#   $2 - tipo (opcional, default: "notification")
#
# Retorno:
#   0 - Sucesso
#   1 - Erro na requisi√ß√£o
#   2 - Erro de valida√ß√£o (400)
#   3 - Erro de acesso (403)
#   4 - Erro de servi√ßo (503)
###############################################################################
send_whatsapp() {
    local mensagem="$1"
    local tipo="${2:-notification}"

    # Valida√ß√£o de par√¢metros
    if [ -z "$mensagem" ]; then
        echo "‚ö†Ô∏è  AVISO: send_whatsapp() chamado sem mensagem" >&2
        return 1
    fi

    # Escapa aspas duplas na mensagem (JSON encoding b√°sico)
    mensagem_escaped=$(echo "$mensagem" | sed 's/"/\\"/g')

    # Cria payload JSON
    local payload=$(cat <<EOF
{
  "mensagem": "${mensagem_escaped}",
  "tipo": "${tipo}"
}
EOF
)

    # Envia requisi√ß√£o HTTP POST
    local http_code
    local response

    response=$(curl -s -w "\n%{http_code}" \
        -X POST \
        -H "Content-Type: application/json" \
        -d "$payload" \
        --max-time "$HTTP_TIMEOUT" \
        "$WHATSAPP_ENDPOINT" 2>/dev/null)

    # Extrai c√≥digo HTTP da √∫ltima linha
    http_code=$(echo "$response" | tail -n 1)
    response_body=$(echo "$response" | head -n -1)

    # Analisa resultado
    case "$http_code" in
        200)
            # Sucesso
            return 0
            ;;
        400)
            echo "‚ö†Ô∏è  AVISO: Payload inv√°lido ao enviar notifica√ß√£o WhatsApp" >&2
            return 2
            ;;
        403)
            echo "‚ö†Ô∏è  AVISO: Acesso negado ao endpoint WhatsApp (IP n√£o na whitelist)" >&2
            return 3
            ;;
        503)
            echo "‚ö†Ô∏è  AVISO: Sess√£o WhatsApp n√£o encontrada ou inativa" >&2
            return 4
            ;;
        "")
            echo "‚ö†Ô∏è  AVISO: Falha na conex√£o com Django em $WHATSAPP_ENDPOINT" >&2
            return 1
            ;;
        *)
            echo "‚ö†Ô∏è  AVISO: Erro ao enviar notifica√ß√£o WhatsApp (HTTP $http_code)" >&2
            return 1
            ;;
    esac
}

###############################################################################
# Fun√ß√£o: send_whatsapp_silent
# Igual a send_whatsapp mas n√£o exibe avisos em stderr
# √ötil para cron jobs que devem rodar silenciosamente
###############################################################################
send_whatsapp_silent() {
    send_whatsapp "$1" "$2" 2>/dev/null
}

###############################################################################
# Fun√ß√£o: format_backup_notification
# Formata mensagem padr√£o de backup
#
# Par√¢metros:
#   $1 - status (success/error)
#   $2 - backup_file (caminho do arquivo)
#   $3 - size (tamanho do arquivo)
#   $4 - duration (tempo em segundos)
###############################################################################
format_backup_notification() {
    local status="$1"
    local backup_file="$2"
    local size="$3"
    local duration="$4"

    if [ "$status" = "success" ]; then
        cat <<EOF
‚úÖ Backup MySQL Conclu√≠do

üìÖ Data: $(date '+%d/%m/%Y %H:%M:%S')
üì¶ Arquivo: $(basename "$backup_file")
üíæ Tamanho: $size
‚è±Ô∏è  Dura√ß√£o: ${duration}s
üîß Banco: nossopaineldb

Status: Sucesso ‚úÖ
EOF
    else
        cat <<EOF
‚ùå ERRO no Backup MySQL

üìÖ Data: $(date '+%d/%m/%Y %H:%M:%S')
üîß Banco: nossopaineldb
‚ö†Ô∏è  Status: FALHOU

Verifique os logs do container MySQL para mais detalhes.
EOF
    fi
}

###############################################################################
# Fun√ß√£o: format_monitor_alert
# Formata mensagem padr√£o de alerta de monitoramento
#
# Par√¢metros:
#   $1 - tipo_alerta (disk/connections/slow_queries)
#   $2 - valor_atual
#   $3 - limite
###############################################################################
format_monitor_alert() {
    local tipo="$1"
    local valor="$2"
    local limite="$3"

    case "$tipo" in
        disk)
            cat <<EOF
‚ö†Ô∏è ALERTA: Disk Usage MySQL

üìÖ Data: $(date '+%d/%m/%Y %H:%M:%S')
üíæ Uso atual: ${valor}%
‚ö†Ô∏è  Limite: ${limite}%

O espa√ßo em disco est√° acima do limite configurado.
Considere limpar backups antigos ou expandir o volume.
EOF
            ;;
        connections)
            cat <<EOF
‚ö†Ô∏è ALERTA: Conex√µes MySQL

üìÖ Data: $(date '+%d/%m/%Y %H:%M:%S')
üîå Conex√µes ativas: $valor
‚ö†Ô∏è  Limite: $limite

O n√∫mero de conex√µes est√° pr√≥ximo do m√°ximo.
Verifique se h√° conex√µes travadas ou vazamentos.
EOF
            ;;
        slow_queries)
            cat <<EOF
‚ö†Ô∏è ALERTA: Slow Queries MySQL

üìÖ Data: $(date '+%d/%m/%Y %H:%M:%S')
üêå Queries lentas (√∫ltimas 6h): $valor
‚ö†Ô∏è  Limite: $limite

N√∫mero elevado de queries lentas detectado.
Analise o slow query log para otimiza√ß√µes.
EOF
            ;;
        *)
            echo "‚ö†Ô∏è ALERTA MySQL: $tipo - Valor: $valor (Limite: $limite)"
            ;;
    esac
}

# Exporta fun√ß√µes para uso em outros scripts
export -f send_whatsapp
export -f send_whatsapp_silent
export -f format_backup_notification
export -f format_monitor_alert
